{"version":3,"sources":["components/Navbar/index.js","components/Header/index.js","components/Footer/index.js","components/CharacterImage/index.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","message","score","highscore","className","id","href","Header","Footer","CharacterImages","name","image","clickHandler","alt","src","onClick","data-name","clickedNameArray","App","state","characters","e","target","getAttribute","includes","setState","currentScore","push","arr","i","length","j","Math","floor","random","temp","this","map","character","CharacterImage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y8BAoBeA,MAhBf,YAA8C,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,UAC/B,OACE,sBAAKC,UAAU,iDAAf,UACE,mBAAGA,UAAU,eAAeC,GAAG,aAAaC,KAAK,IAAjD,gCACE,sBAAKF,UAAU,kBAAkBC,GAAG,aAApC,UACE,qBAAKD,UAAU,qBAAf,SACE,sBAAMA,UAAU,8BAA8BC,GAAG,iBAAjD,SAAmEJ,MAErE,sBAAKG,UAAU,gBAAgBC,GAAG,eAAlC,oBAAyDH,KACzD,qBAAKE,UAAU,UAAf,eACA,sBAAKA,UAAU,qBAAqBC,GAAG,YAAvC,wBAA+DF,Y,MCA1DI,MAXf,WACE,OACE,qBAAKH,UAAU,4BAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,6BAAd,sCACA,mBAAGA,UAAU,mBAAb,yF,MCMOI,MAXf,WACE,OACE,mCACE,4DACA,qBAAKJ,UAAU,SAAf,SACA,sD,aCISK,MARf,YAAuD,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,aACrC,OACM,qBAAKR,UAAU,aAAf,SACI,qBAAKS,IAAKH,EAAMI,IAAKH,EAAOI,QAASH,EAAcI,YAAWN,OCCtEO,EAAmB,GA0ERC,E,4MAtEbC,MAAQ,CACNC,WAAYA,EACZlB,MAAO,EACPC,UAAW,EACXF,QAAS,e,EAIXW,aAAe,SAAAS,GAGb,IAAMX,EAAOW,EAAEC,OAAOC,aAAa,aAGnC,GAAGN,EAAiBO,SAASd,GAC3B,EAAKe,SAAS,CAACxB,QAAS,+BACxBgB,EAAmB,GACnB,EAAKQ,SAAS,CAACvB,MAAO,QACjB,CACL,IAAMwB,EAAe,EAAKP,MAAMjB,MAAQ,EACxC,EAAKuB,SAAS,CAACvB,MAAOwB,IACtB,EAAKD,SAAS,CAACxB,QAAS,sCACxBgB,EAAiBU,KAAKjB,GACnBgB,EAAe,EAAKP,MAAMhB,WAC3B,EAAKsB,SAAS,CAACtB,UAAWuB,IAM9B,IADA,IAAME,EAAM,EAAKT,MAAMC,WACdS,EAAID,EAAIE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,SAAWN,EAAIE,QACnCK,EAAOP,EAAIC,GACfD,EAAIC,GAAKD,EAAIG,GACbH,EAAIG,GAAKI,EAEX,EAAKV,SAAS,CAACL,WAAYQ,K,uDAKnB,IAAD,OACP,OACE,gCACE,cAAC,EAAD,CACE1B,MAAOkC,KAAKjB,MAAMjB,MAClBC,UAAWiC,KAAKjB,MAAMhB,UACtBF,QAASmC,KAAKjB,MAAMlB,UAEtB,cAAC,EAAD,IAEA,qBAAKG,UAAW,YAAhB,SACE,qBAAKA,UAAU,MAAf,SACGgC,KAAKjB,MAAMC,WAAWiB,KAAI,SAAAC,GAAS,OAClC,cAACC,EAAD,CACElC,GAAIiC,EAAUjC,GAEdK,KAAM4B,EAAU5B,KAChBC,MAAO2B,EAAU3B,MACjBC,aAAc,EAAKA,cAHd0B,EAAUjC,WAQzB,cAAC,EAAD,W,GAlEYmC,aCEHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a490d3ec.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// passing in our message, score and highscore props\nfunction Navbar({message, score, highscore}) {\n  return (\n    <nav className=\"navbar navbar-expand-sm fixed-top navbar-light\"> \n      <a className=\"navbar-brand\" id=\"avatarMain\" href=\"/\">Click Game: Avatar</a>\n        <div className=\"navbar-collapse\" id=\"navbarText\">\n          <div className=\"navbar-nav mx-auto\">\n            <span className=\"navbar-text mt-2 h3 message\" id=\"messageDisplay\">{message}</span>\n          </div> \n          <div className=\"nav-item mr-2\" id=\"currentScore\">Score: {score}</div>\n          <div className=\"divider\">|</div>\n          <div className=\"nav-item ml-2 mr-2\" id=\"highScore\">Top Score: {highscore}</div>\n        </div>     \n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4 text-center mt-5\">CLICK AN IMAGE TO BEGIN!</h1>\n        <p className=\"lead text-center\">Click an image to earn points, but don't click on the same character!</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer>\n      <p>Avatar: The Last Click Game</p>\n      <div className=\"bottom\">\n      <p>&copy; Jerri Fong</p>\n      </div>\n    </footer>  \n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\n// passing in the name, image and clickHandler props\nfunction CharacterImages({name, image, clickHandler}) {\n  return (\n        <div className=\"col-md m-2\">\n            <img alt={name} src={image} onClick={clickHandler} data-name={name}/>\n        </div>\n  );\n};\n\nexport default CharacterImages;\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport characters from \"./characters.json\";\nimport CharacterImage from \"./components/CharacterImage\";\n\n// empty array to push in clicked character names and check if the user already clicked that character\nlet clickedNameArray = [];\n\nclass App extends Component {\n  // the state of our characters, score, highscore and message\n  state = {\n    characters: characters,\n    score: 0,\n    highscore: 0,\n    message: \"LET'S PLAY!\"\n  };\n\n  // our click handler for whichever image the user has clicked on\n  clickHandler = e => {\n    \n    // getting the attribute for data-name\n    const name = e.target.getAttribute(\"data-name\");\n\n    // setting a conditional statement that if the array already includes the name of the character, reset the array and score and change the state of the message else, if the character's name is not in the array, push the name into the array and set the state of the highscore\n    if(clickedNameArray.includes(name)) {\n      this.setState({message: \"You lose SOKKA! Try again!\"});\n      clickedNameArray = [];\n      this.setState({score: 0});\n    } else {\n      const currentScore = this.state.score + 1;\n      this.setState({score: currentScore});\n      this.setState({message: \"Great job! A round of APPA-lause!\"});\n      clickedNameArray.push(name);\n      if(currentScore > this.state.highscore) {\n        this.setState({highscore: currentScore})\n      };\n    };\n\n    // shuffles our character images randomly\n    const arr = this.state.characters;\n    for (let i = arr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * arr.length);\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    };\n    this.setState({characters: arr});\n   \n  };\n\n  // passing in our props in their respective parts of the page however the layout was made\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          highscore={this.state.highscore}\n          message={this.state.message}\n         />\n        <Header />\n        {/* main container mapping through each of our characters */}\n        <div className =\"container\">\n          <div className=\"row\">\n            {this.state.characters.map(character => (\n              <CharacterImage\n                id={character.id}\n                key={character.id}\n                name={character.name}\n                image={character.image}\n                clickHandler={this.clickHandler}\n              />\n            ))}\n        </div>\n      </div>\n      <Footer />\n    </div>\n    );\n  };\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}